const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');

const dataDir = path.join(__dirname, '../data');
const streakFile = path.join(dataDir, 'streakData.json');
const statsFile = path.join(dataDir, 'statsData.json');

// JSONBin.io configuration
const JSONBIN_BASE_URL = 'https://api.jsonbin.io/v3/b';
const JSONBIN_API_KEY = process.env.JSONBIN_API_KEY || 'your-jsonbin-api-key';
const STREAK_BIN_ID = process.env.STREAK_BIN_ID || 'your-streak-bin-id';
const STATS_BIN_ID = process.env.STATS_BIN_ID || 'your-stats-bin-id';

async function ensureDataDir() {
  try {
    await fs.access(dataDir);
  } catch {
    await fs.mkdir(dataDir, { recursive: true });
  }
}

// Fallback to local storage if cloud storage fails
async function loadData(filePath, defaults) {
  try {
    await ensureDataDir();
    const data = await fs.readFile(filePath, 'utf8');
    const fileData = JSON.parse(data);
    
    if (fileData.lastManualUpdate) {
      const fileUpdateDate = new Date(fileData.lastManualUpdate);
      const defaultUpdateDate = new Date(defaults.lastManualUpdate);
      
      if (fileUpdateDate >= defaultUpdateDate) {
        return fileData;
      }
    }
    
    return { ...defaults, ...fileData };
  } catch (error) {
    await saveData(filePath, defaults);
    return defaults;
  }
}

async function saveData(filePath, data) {
  await ensureDataDir();
  await fs.writeFile(filePath, JSON.stringify(data, null, 2));
}

// Cloud storage functions
async function loadFromCloud(binId, defaults) {
  try {
    if (!JSONBIN_API_KEY || JSONBIN_API_KEY === 'your-jsonbin-api-key') {
      throw new Error('JSONBIN_API_KEY not configured');
    }
    
    const response = await axios.get(`${JSONBIN_BASE_URL}/${binId}/latest`, {
      headers: {
        'X-Master-Key': JSONBIN_API_KEY,
        'X-Bin-Meta': false
      }
    });
    
    return response.data;
  } catch (error) {
    console.log('Falling back to local storage:', error.message);
    return defaults;
  }
}

async function saveToCloud(binId, data) {
  try {
    if (!JSONBIN_API_KEY || JSONBIN_API_KEY === 'your-jsonbin-api-key') {
      throw new Error('JSONBIN_API_KEY not configured');
    }
    
    await axios.put(`${JSONBIN_BASE_URL}/${binId}`, data, {
      headers: {
        'Content-Type': 'application/json',
        'X-Master-Key': JSONBIN_API_KEY
      }
    });
    
    console.log('Data saved to cloud storage successfully');
  } catch (error) {
    console.log('Failed to save to cloud, using local storage only:', error.message);
  }
}

async function loadStreakData() {
  const defaults = {
    currentStreak: 238,
    longestStreak: 238,
    totalRuns: 238,
    totalDistance: 2346600,
    totalTime: 699900,
    totalElevation: 25714,
    streakStartDate: "2024-12-31",
    lastRunDate: new Date(Date.now() - 86400000).toDateString(),
    manuallyUpdated: true,
    lastManualUpdate: new Date().toDateString()
  };

  try {
    // Try to load from cloud first
    const cloudData = await loadFromCloud(STREAK_BIN_ID, defaults);
    
    // Fall back to local storage if cloud fails
    if (cloudData && cloudData.currentStreak !== undefined) {
      return cloudData;
    }
    
    return await loadData(streakFile, defaults);
  } catch (error) {
    return await loadData(streakFile, defaults);
  }
}

async function saveStreakData(data) {
  data.lastManualUpdate = new Date().toDateString();
  
  try {
    // Save to cloud
    await saveToCloud(STREAK_BIN_ID, data);
    
    // Also save locally as backup
    await saveData(streakFile, data);
  } catch (error) {
    // Fall back to local storage only
    await saveData(streakFile, data);
  }
}

async function loadStatsData() {
  const defaults = {
    monthlyDistance: 229.5,
    yearlyDistance: 2336.0,
    monthlyTime: 0,
    yearlyTime: 0,
    monthlyElevation: 2793,
    yearlyElevation: 25595,
    monthlyGoal: 250,
    yearlyGoal: 3250,
    lastUpdated: null
  };

  try {
    // Try to load from cloud first
    const cloudData = await loadFromCloud(STATS_BIN_ID, defaults);
    
    // Fall back to local storage if cloud fails
    if (cloudData && cloudData.monthlyDistance !== undefined) {
      return cloudData;
    }
    
    return await loadData(statsFile, defaults);
  } catch (error) {
    return await loadData(statsFile, defaults);
  }
}

async function saveStatsData(data) {
  data.lastUpdated = new Date().toISOString();
  
  try {
    // Save to cloud
    await saveToCloud(STATS_BIN_ID, data);
    
    // Also save locally as backup
    await saveData(statsFile, data);
  } catch (error) {
    // Fall back to local storage only
    await saveData(statsFile, data);
  }
}

module.exports = {
  loadStreakData,
  saveStreakData,
  loadStatsData,
  saveStatsData
};
