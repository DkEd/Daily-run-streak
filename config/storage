// Add this near the top of the file
const CACHE_DURATION = 60000; // 1 minute cache
let lastCloudFetch = 0;
let cachedStatsData = null;
let cachedStreakData = null;

// Update the load functions to accept a forceRefresh parameter
async function loadStreakData(forceRefresh = false) {
  try {
    const now = Date.now();
    
    // Use cache if not forcing refresh and cache is still valid
    if (!forceRefresh && cachedStreakData && (now - lastCloudFetch) < CACHE_DURATION) {
      return cachedStreakData;
    }
    
    // Load everything from stats bin first
    const allData = await loadStatsData(forceRefresh);
    
    // Extract streak data from stats or use defaults
    if (allData.streakData) {
      cachedStreakData = { ...defaultStreakData, ...allData.streakData };
    } else {
      cachedStreakData = await loadData(streakFile, defaultStreakData);
    }
    
    lastCloudFetch = now;
    return cachedStreakData;
  } catch (error) {
    return await loadData(streakFile, defaultStreakData);
  }
}

async function loadStatsData(forceRefresh = false) {
  try {
    const now = Date.now();
    
    // Use cache if not forcing refresh and cache is still valid
    if (!forceRefresh && cachedStatsData && (now - lastCloudFetch) < CACHE_DURATION) {
      return cachedStatsData;
    }
    
    // Try to load from cloud first
    const cloudData = await loadFromCloud(STATS_BIN_ID, defaultStatsData);
    
    // Fall back to local storage if cloud fails
    if (cloudData && cloudData.monthlyDistance !== undefined) {
      cachedStatsData = cloudData;
    } else {
      cachedStatsData = await loadData(statsFile, defaultStatsData);
    }
    
    lastCloudFetch = now;
    return cachedStatsData;
  } catch (error) {
    return await loadData(statsFile, defaultStatsData);
  }
}
